import { TreeNode, SearchResult } from './types';

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç —É–∑–µ–ª –ø–æ ID
 */
export const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {
  for (const node of nodes) {
    if (node.id === id) {
      return node;
    }
    if (node.children) {
      const found = findNodeById(node.children, id);
      if (found) return found;
    }
  }
  return null;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —É–∑–ª—É
 */
export const getNodePath = (nodes: TreeNode[], targetId: string, currentPath: string[] = []): string[] | null => {
  for (const node of nodes) {
    const newPath = [...currentPath, node.name];
    
    if (node.id === targetId) {
      return newPath;
    }
    
    if (node.children) {
      const found = getNodePath(node.children, targetId, newPath);
      if (found) return found;
    }
  }
  return null;
};

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–∑–ª—ã –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤
 */
export const flattenNodes = (nodes: TreeNode[], level: number = 0): Array<TreeNode & { level: number }> => {
  const result: Array<TreeNode & { level: number }> = [];
  
  for (const node of nodes) {
    result.push({ ...node, level });
    if (node.children) {
      result.push(...flattenNodes(node.children, level + 1));
    }
  }
  
  return result;
};

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç —É–∑–ª—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
 */
export const searchNodes = (nodes: TreeNode[], query: string): SearchResult[] => {
  const results: SearchResult[] = [];
  const searchTerm = query.toLowerCase();
  
  const searchRecursive = (nodeList: TreeNode[], path: string[] = []) => {
    for (const node of nodeList) {
      const currentPath = [...path, node.name];
      const nodeName = node.name.toLowerCase();
      
      if (nodeName.includes(searchTerm)) {
        const matches = (nodeName.match(new RegExp(searchTerm, 'gi')) || []).length;
        results.push({
          node,
          path: currentPath.join('/'),
          matches
        });
      }
      
      if (node.children) {
        searchRecursive(node.children, currentPath);
      }
    }
  };
  
  searchRecursive(nodes);
  return results.sort((a, b) => b.matches - a.matches);
};

/**
 * –í—ã–¥–µ–ª—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
 */
export const highlightMatches = (text: string, query: string): string => {
  if (!query) return text;
  
  const regex = new RegExp(`(${query})`, 'gi');
  return text.replace(regex, '<mark class="nodeNameHighlight">$1</mark>');
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –ø—Ä–µ–¥–∫–æ–º –¥—Ä—É–≥–æ–≥–æ —É–∑–ª–∞
 */
export const isAncestor = (nodes: TreeNode[], ancestorId: string, descendantId: string): boolean => {
  const ancestor = findNodeById(nodes, ancestorId);
  if (!ancestor || !ancestor.children) return false;
  
  const checkDescendant = (children: TreeNode[]): boolean => {
    for (const child of children) {
      if (child.id === descendantId) return true;
      if (child.children && checkDescendant(child.children)) return true;
    }
    return false;
  };
  
  return checkDescendant(ancestor.children);
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —É–∑–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const getVisibleNodes = (
  nodes: TreeNode[], 
  expandedIds: Set<string>, 
  level: number = 0
): Array<TreeNode & { level: number }> => {
  const result: Array<TreeNode & { level: number }> = [];
  
  for (const node of nodes) {
    result.push({ ...node, level });
    
    if (node.children && expandedIds.has(node.id)) {
      result.push(...getVisibleNodes(node.children, expandedIds, level + 1));
    }
  }
  
  return result;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
 */
export const getFileIcon = (fileName: string): string => {
  const extension = fileName.split('.').pop()?.toLowerCase();
  
  const iconMap: Record<string, string> = {
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    'jpg': 'üñºÔ∏è',
    'jpeg': 'üñºÔ∏è',
    'png': 'üñºÔ∏è',
    'gif': 'üñºÔ∏è',
    'svg': 'üñºÔ∏è',
    'webp': 'üñºÔ∏è',
    
    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    'pdf': 'üìÑ',
    'doc': 'üìù',
    'docx': 'üìù',
    'txt': 'üìÑ',
    'md': 'üìù',
    'rtf': 'üìù',
    
    // –ö–æ–¥
    'js': 'üìú',
    'ts': 'üìú',
    'jsx': '‚öõÔ∏è',
    'tsx': '‚öõÔ∏è',
    'html': 'üåê',
    'css': 'üé®',
    'scss': 'üé®',
    'sass': 'üé®',
    'less': 'üé®',
    'json': 'üìã',
    'xml': 'üìã',
    'yaml': 'üìã',
    'yml': 'üìã',
    
    // –ê—Ä—Ö–∏–≤—ã
    'zip': 'üì¶',
    'rar': 'üì¶',
    '7z': 'üì¶',
    'tar': 'üì¶',
    'gz': 'üì¶',
    
    // –í–∏–¥–µ–æ
    'mp4': 'üé¨',
    'avi': 'üé¨',
    'mov': 'üé¨',
    'wmv': 'üé¨',
    'flv': 'üé¨',
    
    // –ê—É–¥–∏–æ
    'mp3': 'üéµ',
    'wav': 'üéµ',
    'flac': 'üéµ',
    'aac': 'üéµ',
    'ogg': 'üéµ',
  };
  
  return iconMap[extension || ''] || 'üìÑ';
};

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —É–∑–ª—ã (–ø–∞–ø–∫–∏ —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º —Ñ–∞–π–ª—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
 */
export const sortNodes = (nodes: TreeNode[]): TreeNode[] => {
  return [...nodes].sort((a, b) => {
    // –ü–∞–ø–∫–∏ –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
    if (a.type === 'folder' && b.type === 'file') return -1;
    if (a.type === 'file' && b.type === 'folder') return 1;
    
    // –í–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    return a.name.localeCompare(b.name, 'ru', { numeric: true });
  });
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–∑–ª–∞
 */
export const generateNodeId = (path: string): string => {
  return btoa(path).replace(/[^a-zA-Z0-9]/g, '');
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å —É–∑–µ–ª –≤ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª
 */
export const canDropNode = (
  dragNode: TreeNode,
  targetNode: TreeNode,
  allNodes: TreeNode[]
): boolean => {
  // –ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å —É–∑–µ–ª –≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è
  if (dragNode.id === targetNode.id) return false;
  
  // –ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å —É–∑–µ–ª –≤ —Å–≤–æ–π –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
  if (isAncestor(allNodes, dragNode.id, targetNode.id)) return false;
  
  // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–∞–ø–∫—É
  return targetNode.type === 'folder';
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
 */
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 B';
  
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */
export const formatDate = (date: Date): string => {
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  if (days === 0) {
    return '–°–µ–≥–æ–¥–Ω—è';
  } else if (days === 1) {
    return '–í—á–µ—Ä–∞';
  } else if (days < 7) {
    return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
  } else {
    return date.toLocaleDateString('ru-RU');
  }
};